{"version":3,"sources":["HootManager.js"],"names":["HootManager","hookFns","init","prototype","initEnv","self","Function","hook","context","hookFunc","funcName","_context","_funcName","getFuncName","eval","_fullName","console","log","isHooked","assert","fn","strFunc","toString","_regex","patten","match","e","unHook","clearEnv","hasOwnProperty","printHookFns","id","g_HootManager","exports","GetModel"],"mappings":"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","file":"HootManager.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\script\\common","sourcesContent":["/*\n//hook函数\n//function (context, hookFunc, funcName)\ncontext:字符串，上下文。\nhookFunc：你自己的hook函数。实现自己的内容就可以了，不需要回调原函数。\nfuncName：可选参数，字符串，有些函数会重写toString的方法，建议传下函数名。\n*/\n//hook例子\n/*\n    //hook\n    cc.log.hook('cc', function () {\n        console.log('hook log');\n    }, 'log');\n    \n    //unHook\n    cc.log.unHook('cc', 'log');  \n\n*/\n\nvar HootManager = function () {\n    this.hookFns = {};\n    this.init();\n};\n\nHootManager.prototype.init = function () {\n\tthis.initEnv();\n};\n\nHootManager.prototype.initEnv = function () {\n    var self = this;\n    Function.prototype.hook = function (context, hookFunc, funcName) {\n        var _context = null; //函數上下文\n        var _funcName = null; //函數名      \n        _funcName = funcName || getFuncName(this);\n        eval('_context = ' + context + ' || window;')\n        var _fullName = context + '.' + funcName; //函数加上上下文的全名。\n        if (_funcName == '') {\n            console.log(\"can not find funName,hook failed\");\n            return false;\n        };\n\n\n        if (_context[_funcName].prototype && _context[_funcName].prototype.isHooked) {\n            console.log(\"Already has been hooked,unhook first\");\n            return false;\n        }\n\n        if (self.hookFns[_fullName]) {\n            console.assert(\"hookFns has same hook name\");\n        }\n\n        self.hookFns[_fullName] = this;\n\n        function getFuncName(fn) {\n            // 獲取函數名稱\n            var strFunc = fn.toString();\n            var _regex = /function\\s+(\\w+)\\s*\\(/;\n            var patten = strFunc.match(_regex);\n            if (patten) {\n                return patten[1];\n            };\n            return '';\n        }\n\n        try {\n            eval('_context[_funcName] = function ' + _funcName + '(){\\n' +\n                'var args = Array.prototype.slice.call(arguments,0);\\n' +\n                'var obj = this;\\n' +\n                'hookFunc.apply(obj,args)\\n' +\n                'return self.hookFns[_fullName].apply(obj,args);\\n' +\n                '};');\n            _context[_funcName].prototype.isHooked = true;\n            return true;\n        } catch (e) {\n            console.log(\"Hook failed,check the params.\");\n            return false;\n        }\n    },\n\n    Function.prototype.unHook = function (context, funcName) {\n        var _context = null;\n        var _funcName = null;\n        _funcName = funcName;\n        eval('_context = ' + context + ' || window;')\n        var _fullName = context + '.' + funcName; //函数加上上下文的全名。\n        if (!_context[_funcName].prototype.isHooked) {\n            console.log(\"No function is hooked on\");\n            return false;\n        }\n        _context[_funcName] = self.hookFns[_fullName];\n        delete self.hookFns[_fullName];\n        return true;\n    }\n};\n\n\n\nHootManager.prototype.clearEnv = function () {\n    if (Function.prototype.hasOwnProperty(\"hook\")) {\n        delete Function.prototype.hook;\n    }\n    if (Function.prototype.hasOwnProperty(\"unHook\")) {\n        delete Function.prototype.unHook;\n    }\n    return true;\n}\n\nHootManager.prototype.printHookFns = function () {\n    for (var id in this.hookFns) {\n        console.log('hookfn:\\t%s', id);\n    }\n};\n\n\nvar g_HootManager = null;\n\n/**\n * 绑定模块外部方法\n */\nexports.GetModel = function(){\n    if(!g_HootManager){\n        g_HootManager = new HootManager();\n    }\n    return g_HootManager;\n}"]}