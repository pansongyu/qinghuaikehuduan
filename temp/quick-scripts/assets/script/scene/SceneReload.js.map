{"version":3,"sources":["SceneReload.js"],"names":["app","require","SceneReload","cc","Class","extends","Component","properties","onLoad","State_InitClient","State_ShowHealthForm","State_StartUpDate","State_LoadJSFile","State_WaitJSFileLoad","State_EndUpDate","State_SendGateHttp","State_LoadText","State_LoadRes","State_StartGame","State_RunGame","State_StartUpNextDate","State_LoadResFail","State_ClientOutOfDate","initState","allTableDataDict","clientConfig","Client","OnInitClientData","InitTable","LoadFirstConfig","sys","localStorage","setItem","scheduleOnce","SceneType","SceneManager","GetSceneType","ErrLog","LogOutGame","GetMsg","argList","logText","js","formatStr","apply","Log","log","SysLog","error","that","ControlManager","CreateLoadPromise","then","textData","OnLoadFirstConfig","catch","stack","localConfig","textDataList","text","split","count","length","index","dataString","replace","startsWith","dataList","keyName","shift","value","join","endsWith","JSON","parse","stringify","SendHttpRequest","serverUrl","argString","requestType","sendPack","url","dataStr","timeOut","httpRequest","XMLHttpRequest","timeout","open","setRequestHeader","onerror","OnConnectHttpFail","readyState","status","ontimeout","UseLocalConfig","onreadystatechange","OnReceiveHttpPack","responseText","send","httpResText","serverPack","errorNode","active","MultiPoint","serverIP","GetClientConfigProperty","AccessPoint","LocalDataManager","GetConfigProperty","AccountActive","ListChoice","targetList","Math","floor","random","AllTableDict","AllTableNameList","Object","keys","PerTimeTableCount","loadTableCount","OnLoadTable","allCount","tableName","pop","keyNameList","tablePath","RawAsset","update","dt","OnInitClientFinish","ReloadInitModel","accountID","NetManager","InitConnectAccountID","console","InitConnectServer","needInitModel","i","GetModel","Init","module","exports"],"mappings":"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","file":"SceneReload.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\script\\scene","sourcesContent":["/*\n    客户端启动场景，不受场景管理\n*/\n\nvar app = require(\"app\");\n\nvar SceneReload = cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        \n    },\n\n    //加载\n    onLoad: function () {\n        //客户端启动初始状态\n        this.State_InitClient = 0;\n        //显示健康提示语\n        this.State_ShowHealthForm = 1;\n        //客户端更新资源状态\n        this.State_StartUpDate = 2;\n        //加载js文件\n        this.State_LoadJSFile = 3;\n        //等待js文件加载完成回调\n        this.State_WaitJSFileLoad = 4;\n        //更新完成状态\n        this.State_EndUpDate = 5;\n        //发送请求gateserver下载配置\n        this.State_SendGateHttp = 6;\n        //加载txt配置\n        this.State_LoadText = 7;\n        this.State_LoadRes = 8;\n        //进入游戏状态\n        this.State_StartGame = 9;\n        //已经在运行游戏状态\n        this.State_RunGame = 10;\n        //需要更新下一个资源中\n        this.State_StartUpNextDate = 11;\n        //下载资源失败\n        this.State_LoadResFail = 12;\n        //客户端过期\n        this.State_ClientOutOfDate = 13;\n        //初始化状态\n        this.initState = this.State_InitClient;\n\n        //所有表数据字典\n        this.allTableDataDict = {};\n\n        //下载的客户端配置\n        this.clientConfig = {};\n\n        //从全局空间获取客户端ClientManager\n        this.Client = app.Client;\n        this.Client.OnInitClientData(\"\", 1);\n        this.InitTable();\n        this.LoadFirstConfig();\n\n        cc.sys.localStorage.setItem(\"curRunGame\", \"hall\");\n        cc.sys.localStorage.setItem(\"curRunHall\", \"hall_qmyl\");\n\n\n        this.scheduleOnce(()=>{\n            let SceneType=app.SceneManager().GetSceneType();\n            this.ErrLog(\"reloadScene scheduleOnce SceneType:\"+SceneType);\n            if (SceneType== \"reloadScene\" || SceneType==\"\") {\n                app.Client.LogOutGame(1);\n            }\n        },6);\n\n    },\n\n\n    GetMsg:function(argList){\n        let logText = cc.js.formatStr.apply(null, argList);\n        return \"SceneLaunch\" + \"\\t\" + logText;\n    },\n\n    Log:function(...argList){\n        cc.log(this.GetMsg(argList));\n    },\n\n    SysLog:function(...argList){\n        cc.log(this.GetMsg(argList));\n    },\n\n    ErrLog:function(...argList){\n        cc.error(this.GetMsg(argList));\n    },\n    \n    //初始化加载debug文件\n    LoadFirstConfig:function(){\n        let that = this;\n        this.Client.ControlManager.CreateLoadPromise(\"firstConfig\")\n            .then(function(textData){\n                if(!that.OnLoadFirstConfig(textData)){\n                    that.ErrLog(\"OnLoadFirstConfig(%s) fail\", textData);\n                    that.initState = that.State_LoadResFail;\n                }\n            })\n            .catch (function(error){\n                that.ErrLog(\"OnLoadFirstConfig:%s error\", error.stack);\n                that.initState = that.State_LoadResFail;\n            })\n    },\n\n    //解析配置\n    OnLoadFirstConfig:function(textData){\n        this.localConfig = {};\n        try{\n            let textDataList = textData.text.split(\"\\n\");\n            let count = textDataList.length;\n            for(let index=0; index<count; index++){\n                //去除空格\n                let dataString = textDataList[index].replace(/(\\s*$)/g, \"\");\n                if(!dataString){\n                    continue\n                }\n                if(dataString.startsWith(\"#\")){\n                    continue\n                }\n                let dataList = dataString.split(\"=\");\n                if(dataList.length < 2){\n                    this.ErrLog(\"OnLoadFirstConfig dataString:%s error\", dataString);\n                    continue\n                }\n                let keyName = dataList.shift().replace(/(\\s*$)/g, \"\");\n\n                //有可能是多个等于号,后续的分割列表合并成一个做为value\n                let value = \"\";\n                if(dataList.length != 1){\n                    value = dataList.join(\"=\");\n                }\n                else{\n                    value = dataList[0];\n                }\n                value = value.replace(/(\\s*$)/g, \"\");\n                //如果是List或者Dict\n                if(keyName.endsWith(\"List\") || keyName.endsWith(\"Dict\")){\n                    value = JSON.parse(value);\n                }\n                this.localConfig[keyName] = value;\n            }\n        }\n        catch (error){\n            this.ErrLog(\"OnLoadFirstConfig(%s) error:%s\", textData, error.stack);\n            return false\n        }\n\n        //跳过从服务器拉取配置\n        // let gateServerIP = 0;\n        // let dbGateServerInfo = app.LocalDataManager().GetConfigProperty(\"DebugInfo\", \"GateServerInfo\");\n        // //优先使用本地数据库缓存\n        // if(dbGateServerInfo && dbGateServerInfo[\"GateServerIP\"]){\n        //     gateServerIP = dbGateServerInfo[\"GateServerIP\"];\n        // }\n        // else{\n        //     gateServerIP = this.localConfig[\"GateServerIP\"];\n        //     gateServerIP=this.MultiPoint(gateServerIP);\n        // }\n\n        // //如果没有配置IP,使用本地配置\n        // if(gateServerIP){\n        //     let gateServerPort = 0;\n        //     //优先使用本地数据库缓存\n        //     if(dbGateServerInfo && dbGateServerInfo[\"GateServerPort\"]){\n        //         gateServerPort = dbGateServerInfo[\"GateServerPort\"];\n        //     }\n        //     else{\n        //         gateServerPort = this.ListChoice(this.localConfig[\"GateServerPortList\"]);\n        //     }\n        //     if(!gateServerPort){\n        //         this.ErrLog(\"localConfig and dbGateServerInfo not find gateServerPort:\", this.localConfig, dbGateServerInfo);\n        //         return false\n        //     }\n        //     this.gateServerUrl = [\"http://\", gateServerIP, \":\", gateServerPort, \"/ClientPack\"].join(\"\");\n        //     //存放到app作用域\n        //     app[\"GateServerInfo\"] = {\"GateServerIP\":gateServerIP, \"GateServerPort\":gateServerPort};\n\n        //     this.gateSendPack = {\n        //                             \"Head\":0xFF10,\n        //                             \"GameID\":this.localConfig[\"GameID\"],\n        //                             \"ConfigVersion\":this.localConfig[\"ConfigVersion\"],\n        //                         };\n        //     //开始请求客户端配置\n        //     this.initState = this.State_SendGateHttp;\n        //     this.SendHttpRequest(this.gateServerUrl, \"?Sign=ddcat\", \"POST\", this.gateSendPack);\n        // }\n        // //不需要下载远程配置,使用本地配置\n        // else{\n            app[\"GateServerInfo\"] = {\"GateServerIP\":\"0.0.0.0\", \"GateServerPort\":0};\n            this.initState = this.State_LoadText;\n            this.clientConfig = JSON.parse(JSON.stringify(this.localConfig));\n        //}\n\n        return true;\n    },\n\n    /**\n     * 发送HTTP请求\n     * * @param requestType POST or GET\n     */\n    SendHttpRequest:function(serverUrl, argString, requestType, sendPack){\n        // app.NetRequest().SendHttpRequest(serverUrl, argString, requestType, sendPack, 3000, \n        //     this.OnReceiveHttpPack.bind(this), \n        //     this.OnConnectHttpFail.bind(this),\n        //     this.UseLocalConfig.bind(this),\n        //     this.OnConnectHttpFail.bind(this),\n        // );\n        var url = [serverUrl, argString].join(\"\")\n\n        var dataStr = JSON.stringify(sendPack);\n        let timeOut=false;\n        //每次都实例化一个，否则会引起请求结束，实例被释放了\n        var httpRequest = new XMLHttpRequest();\n\n        httpRequest.timeout = 3000;\n\n\n        httpRequest.open(requestType, url, true);\n        //服务器json解码\n        httpRequest.setRequestHeader(\"Content-Type\", \"application/json\");\n\n        var that = this;\n        httpRequest.onerror = function(){\n            that.ErrLog(\"httpRequest.error:%s\", url);\n            that.OnConnectHttpFail(serverUrl, httpRequest.readyState, httpRequest.status);\n        };\n        httpRequest.ontimeout = function(){\n            timeOut=true;\n            that.UseLocalConfig();\n        };\n        httpRequest.onreadystatechange = function(){\n            if(timeOut==true){\n                return;\n            }\n            //执行成功\n            if (httpRequest.status == 200){\n                if(httpRequest.readyState == 4){\n                    that.OnReceiveHttpPack(serverUrl, httpRequest.responseText);\n                }\n            }\n            else{\n                that.OnConnectHttpFail(serverUrl, httpRequest.readyState, httpRequest.status);\n                that.ErrLog(\"onreadystatechange(%s,%s)\", httpRequest.readyState, httpRequest.status);\n            }\n        };\n        httpRequest.send(dataStr);\n\n    },\n\n    //HTTP请求失败\n    OnConnectHttpFail:function(serverUrl, readyState, status){\n        this.UseLocalConfig();    \n    },\n    UseLocalConfig:function(){\n        app[\"GateServerInfo\"] = {\"GateServerIP\":\"0.0.0.0\", \"GateServerPort\":0};\n        this.initState = this.State_LoadText;\n        this.clientConfig = JSON.parse(JSON.stringify(this.localConfig));\n    },\n\n    //http请求回复\n    OnReceiveHttpPack:function(serverUrl, httpResText){\n        try{\n            let serverPack = JSON.parse(httpResText);\n\n            if(serverPack[\"IsSuccess\"] == 1){\n                this.clientConfig = serverPack[\"ClientConfig\"];\n                //追加本地标示\n                this.clientConfig[\"GameID\"] = this.localConfig[\"GameID\"];\n                this.clientConfig[\"ConfigVersion\"] = this.localConfig[\"ConfigVersion\"];\n\n                this.initState = this.State_LoadText;\n                this.SysLog(\"LoadClientConfig success\");\n            }\n            else{\n                this.clientConfig = {};\n                this.initState = this.State_LoadResFail;\n                this.ErrLog(\"LoadClientConfig fail\");\n\n                this.errorNode.active = 1;\n            }\n        }\n        catch (error){\n            this.ErrLog(\"OnReceiveHttpPack:%s\", error.stack);\n            this.initState = this.State_LoadResFail;\n            this.clientConfig = {};\n        }\n    },\n\n    MultiPoint:function(serverIP){\n        if(serverIP==\"\"){\n            return \"\";\n        }\n        if(app.Client.GetClientConfigProperty(\"IsGaoFang\")==0){\n            //不接入高防\n            return serverIP;\n        }\n        let AccessPoint=app.LocalDataManager().GetConfigProperty(\"Account\", \"AccessPoint\");\n        if(AccessPoint>0){\n             if(AccessPoint==1){\n                 return 'line1.'+serverIP;\n             }else if(AccessPoint==2){\n                 return 'line2.'+serverIP;\n             }else if(AccessPoint==3){\n                 return 'line3.'+serverIP;\n             }\n        }\n\n         let AccountActive = app.LocalDataManager().GetConfigProperty(\"Account\", \"AccountActive\");\n         if(AccountActive>100){\n             serverIP='a100.'+serverIP;\n         }else if(AccountActive>50){\n             serverIP='i50.'+serverIP;\n         }else if(AccountActive>10){\n             serverIP='x10.'+serverIP;\n         }\n\n\n        return serverIP;\n    },\n\n    //列表随机\n    ListChoice:function(targetList){\n        var length = targetList.length;\n        if(length < 1){\n            return null;\n        }\n        return targetList[Math.floor(Math.random()*(length))];\n    },\n\n    //初始化表数据\n    InitTable:function(){\n        this.AllTableDict = {\n            \"DiamondStore\":null,\n            \"Effect\":null,\n            \"Face\":null,\n            \"FirstCharge\":null,\n            \"gameCreate\":null,\n            \"GameHelp\":null,\n            \"gameList\":null,\n            \"gametype\":null,\n            \"Gift\":null,\n            \"IntegrateImage\":null,\n            \"keywords\":null,\n            \"NewSysMsg\":null,\n            \"practice\":null,\n            \"robot\":null,\n            \"roomcost\":null,\n            \"SceneInfo\":null,\n            \"signin\":null,\n            \"Sound\":null,\n            \"trusteeshipTime\":null,\n            \"selectCity\":null,\n            \"ServiceAgreement\":null\n        };\n        this.AllTableNameList = Object.keys(this.AllTableDict);\n        \n        //每次加载几张配置表\n        this.PerTimeTableCount = 2;\n        this.loadTableCount = 0;\n    },\n\n    //加载表数据回掉\n    OnLoadTable:function(){\n        let that = this;\n        let allCount = Object.keys(this.AllTableDict).length;\n        \n        //加载完所有表格\n        if(this.loadTableCount >= allCount){\n            this.initState = this.State_StartGame;\n        }\n\n        for(let index = 0; index < this.PerTimeTableCount; index++){\n\n            let tableName = this.AllTableNameList.pop();\n            //已经发送所有表请求\n            if(!tableName){\n                break\n            }\n            let keyNameList = this.AllTableDict[tableName];\n            let tablePath = 'jsonData/' + tableName;\n\n            this.Client.ControlManager.CreateLoadPromise(tablePath, cc.RawAsset)\n                                    .then(function(textData){\n                                        that.loadTableCount += 1;\n                                        that.allTableDataDict[tableName] = {\"Data\":textData, \"KeyNameList\":keyNameList};\n                                    })\n                                    .catch(function(error){\n                                        that.ErrLog(\"tablePath(%s) error:%s\", tablePath, error.stack);\n                                        that.initState = that.State_LoadResFail;\n                                    })\n        }\n    },\n\n    //每帧回掉\n    update: function (dt) {\n        //没有初始化客户端实例\n        if(!this.Client){\n            return\n        }\n\n        switch (this.initState){\n            case this.State_LoadText:\n                this.OnLoadTable();\n                break\n            \n            case this.State_StartGame:\n                this.initState = this.State_RunGame;\n                this.Client.OnInitClientFinish(this.allTableDataDict, this.clientConfig);\n                this.ReloadInitModel();\n                let accountID = app.LocalDataManager().GetConfigProperty(\"Account\", \"AccountID\");\n                app.NetManager().InitConnectAccountID(accountID);\n                console.log(\"开始重新连接  accountID：\" + accountID);\n                app.NetManager().InitConnectServer();\n                break\n            case this.State_RunGame:\n                \n                break\n            default:\n                break\n        }\n    },\n    //重新载入需要重新初始化脚本\n    ReloadInitModel:function(){\n        let needInitModel = [\n                                // \"SysNotifyManager\",\n                                // \"WeChatManager\",\n                                // //资源模块\n                                // // \"SceneManager\",\n                                // \"EffectManager\",\n                                // \"SoundManager\",\n                                //数据管理器\n                                \"HeroAccountManager\",\n                                // \"RoomRecordManager\",\n                                // //-----汇总数据管理器----\n                                \"ClubManager\",\n                                \"PlayerHelpManager\",\n                                // \"GameManager\",\n                                // //-----战斗相关-------\n                                // \"PlayerRoomManager\",\n                            ];\n\n        for (var i = 0; i < needInitModel.length; i++) {\n            require(needInitModel[i]).GetModel().Init();\n        }\n    },\n});\n\nmodule.exports = SceneReload;"]}